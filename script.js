const container=document.getElementById('container'),totalImages=128,darkMode=window.matchMedia('(prefers-color-scheme: dark)').matches,folder=darkMode?'dark':'white',imgs=[],highPriorityCount=10;for(let i=0;i<totalImages;i++){const img=document.createElement('img');img.src=`${folder}/slice_${i}.webp`;img.alt=i;img.draggable=false;img.style.order=i;i<highPriorityCount?img.fetchPriority='high':img.loading='lazy';container.appendChild(img);imgs.push(img);}let arr=imgs.slice();function resizeImages(){const perRow=128,w=container.clientWidth/perRow;arr.forEach(img=>img.style.width=`${w}px`);}window.addEventListener('resize',resizeImages);resizeImages();function swapOrder(a,b){const t=a.style.order;a.style.order=b.style.order;b.style.order=t;}let stopFlag=false;const shuffleBtn=document.getElementById('shuffleBtn');function setShuffleEnabled(enabled){shuffleBtn.disabled=!enabled;}shuffleBtn.addEventListener('click',()=>{if(!shuffleBtn.disabled)shuffleArray(arr);document.getElementById('status').textContent='섞음 완료';});document.getElementById('toggleBtn').addEventListener('click',async()=>{if(stopFlag){stopFlag=false;return;}stopFlag=true;const btn=document.getElementById('toggleBtn');btn.textContent='중지';setShuffleEnabled(false);const mode=document.getElementById('sortSelect').value,delay=+document.getElementById('speedInput').value;document.getElementById('status').textContent='정렬 중';switch(mode){case'bubble':await bubbleSort(arr,delay);break;case'selection':await selectionSort(arr,delay);break;case'insertion':await insertionSort(arr,delay);break;case'shell':await shellSort(arr,delay);break;case'heap':await heapSort(arr,delay);break;case'quick':await quickSort(arr,delay);break;case'merge':await mergeSort(arr,delay);break;case'counting':await countingSort(arr,delay);break;case'radix':await radixSort(arr,delay);break;case'stooge':await stoogeSort(arr,delay);break;case'tim':await timSort(arr,delay);break;case'intro':await introSort(arr,delay);break;case'blockMerge':await blockMergeSort(arr,delay);break;case'patternQuick':await patternQuick(arr,delay);break;}document.getElementById('status').textContent=stopFlag?'완료':'대기 중';stopFlag=false;btn.textContent='시작';setShuffleEnabled(true);});async function bubbleSort(a,d){for(let i=0;i<a.length;i++){for(let j=0;j<a.length-i-1;j++){if(!stopFlag)return;if(+a[j].alt>+a[j+1].alt){[a[j],a[j+1]]=[a[j+1],a[j]];swapOrder(a[j],a[j+1]);await new Promise(r=>setTimeout(r,d));}}}}async function selectionSort(a,d){for(let i=0;i<a.length-1;i++){if(!stopFlag)return;let min=i;for(let j=i+1;j<a.length;j++)if(+a[j].alt<+a[min].alt)min=j;if(min!==i){[a[i],a[min]]=[a[min],a[i]];swapOrder(a[i],a[min]);await new Promise(r=>setTimeout(r,d));}}}async function insertionSort(a,d){for(let i=1;i<a.length;i++){if(!stopFlag)return;let key=a[i],j=i-1;while(j>=0&&+a[j].alt>+key.alt){a[j+1]=a[j];swapOrder(a[j+1],a[j]);j--;await new Promise(r=>setTimeout(r,d));}a[j+1]=key;await new Promise(r=>setTimeout(r,d));}}async function shellSort(a,d){let n=a.length;for(let gap=Math.floor(n/2);gap>0;gap=Math.floor(gap/2)){for(let i=gap;i<n;i++){if(!stopFlag)return;let temp=a[i],j=i;while(j>=gap&&+a[j-gap].alt>+temp.alt){a[j]=a[j-gap];swapOrder(a[j],a[j-gap]);j-=gap;await new Promise(r=>setTimeout(r,d));}a[j]=temp;await new Promise(r=>setTimeout(r,d));}}}async function heapSort(a,d){let n=a.length;function heapify(n,i){if(!stopFlag)return;let largest=i,l=2*i+1,r=2*i+2;if(l<n&&+a[l].alt>+a[largest].alt)largest=l;if(r<n&&+a[r].alt>+a[largest].alt)largest=r;if(largest!==i){[a[i],a[largest]]=[a[largest],a[i]];swapOrder(a[i],a[largest]);heapify(n,largest);}}for(let i=Math.floor(n/2)-1;i>=0;i--)heapify(n,i);for(let i=n-1;i>0;i--){[a[0],a[i]]=[a[i],a[0]];swapOrder(a[0],a[i]);heapify(i,0);await new Promise(r=>setTimeout(r,d));}}async function quickSort(a,d,l=0,r=a.length-1){if(!stopFlag)return;if(l>=r)return;let pivot=+a[r].alt,i=l;for(let j=l;j<r;j++){if(+a[j].alt<pivot){[a[i],a[j]]=[a[j],a[i]];swapOrder(a[i],a[j]);i++;await new Promise(r=>setTimeout(r,d));}}[a[i],a[r]]=[a[r],a[i]];swapOrder(a[i],a[r]);await quickSort(a,d,l,i-1);await quickSort(a,d,i+1,r);}async function mergeSort(a,d){async function merge(l,m,r){if(!stopFlag)return;let left=a.slice(l,m),right=a.slice(m,r),i=0,j=0,k=l;while(i<left.length&&j<right.length){if(+left[i].alt<=+right[j].alt){a[k]=left[i];a[k].style.order=k;i++;}else{a[k]=right[j];a[k].style.order=k;j++;}await new Promise(r=>setTimeout(r,d));k++;}while(i<left.length){a[k]=left[i];a[k].style.order=k;i++;k++;await new Promise(r=>setTimeout(r,d));}while(j<right.length){a[k]=right[j];a[k].style.order=k;j++;k++;await new Promise(r=>setTimeout(r,d));}}async function sort(l,r){if(r-l<=1)return;let m=Math.floor((l+r)/2);await sort(l,m);await sort(m,r);await merge(l,m,r);}await sort(0,a.length);}async function countingSort(a,d){let max=Math.max(...a.map(x=>+x.alt)),count=Array(max+1).fill(0);a.forEach(x=>count[+x.alt]++);let idx=0;for(let i=0;i<count.length;i++){while(count[i]-->0){if(!stopFlag)return;a[idx].alt=i;a[idx].style.order=idx;idx++;await new Promise(r=>setTimeout(r,d));}}}async function radixSort(a,d){let max=Math.max(...a.map(x=>+x.alt));for(let exp=1;Math.floor(max/exp)>0;exp*=10){if(!stopFlag)return;let output=Array(a.length),count=Array(10).fill(0);a.forEach(x=>count[Math.floor(+x.alt/exp)%10]++);for(let i=1;i<10;i++)count[i]+=count[i-1];for(let i=a.length-1;i>=0;i--){let x=a[i],idx=Math.floor(+x.alt/exp)%10;output[count[idx]-1]=x;count[idx]--;}for(let i=0;i<a.length;i++){if(!stopFlag)return;a[i]=output[i];a[i].style.order=i;await new Promise(r=>setTimeout(r,d));}}}async function stoogeSort(a,d,l=0,h=a.length-1){if(!stopFlag)return;if(l>=h)return;if(+a[l].alt>+a[h].alt){[a[l],a[h]]=[a[h],a[l]];swapOrder(a[l],a[h]);await new Promise(r=>setTimeout(r,d));}if(h-l+1>2){let t=Math.floor((h-l+1)/3);await stoogeSort(a,d,l,h-t);await stoogeSort(a,d,l+t,h);await stoogeSort(a,d,l,h-t);}}async function timSort(a,d){const RUN=32;function insertion(l,r){for(let i=l+1;i<=r;i++){let key=a[i],j=i-1;while(j>=l&&+a[j].alt>+key.alt){a[j+1]=a[j];swapOrder(a[j+1],a[j]);j--;}a[j+1]=key;}}async function merge(l,m,r){let left=a.slice(l,m+1),right=a.slice(m+1,r+1),i=0,j=0,k=l;while(i<left.length&&j<right.length){if(+left[i].alt<=+right[j].alt){a[k]=left[i];a[k].style.order=k;i++;}else{a[k]=right[j];a[k].style.order=k;j++;}await new Promise(r=>setTimeout(r,d));k++;}while(i<left.length){a[k]=left[i];a[k].style.order=k;i++;k++;await new Promise(r=>setTimeout(r,d));}while(j<right.length){a[k]=right[j];a[k].style.order=k;j++;k++;await new Promise(r=>setTimeout(r,d));}}for(let i=0;i<a.length;i+=RUN)insertion(i,Math.min(i+RUN-1,a.length-1));for(let size=RUN;size<a.length;size*=2){for(let left=0;left<a.length;left+=2*size){let mid=Math.min(left+size-1,a.length-1),right=Math.min(left+2*size-1,a.length-1);if(mid<right)await merge(left,mid,right);}}}async function introSort(a,d,maxDepth=Math.floor(2*Math.log(a.length))){async function sort(l,r,depth){if(!stopFlag)return;if(r-l<=16){await insertionSort(a,d);return;}if(depth===0){await heapSort(a,d);return;}let pivot=+a[r].alt,i=l;for(let j=l;j<r;j++){if(+a[j].alt<pivot){[a[i],a[j]]=[a[j],a[i]];swapOrder(a[i],a[j]);i++;await new Promise(r=>setTimeout(r,d));}}[a[i],a[r]]=[a[r],a[i]];swapOrder(a[i],a[r]);await sort(l,i-1,depth-1);await sort(i+1,r,depth-1);}await sort(0,a.length-1,maxDepth);}async function blockMergeSort(a,d){async function merge(l,m,r){if(!stopFlag)return;let temp=[],i=l,j=m;while(i<m&&j<r){if(+a[i].alt<=+a[j].alt)temp.push(a[i++]);else temp.push(a[j++]);}while(i<m)temp.push(a[i++]);while(j<r)temp.push(a[j++]);for(let k=l;k<r;k++){a[k]=temp[k-l];a[k].style.order=k;await new Promise(r=>setTimeout(r,d));}}async function sort(l,r){if(r-l<=1)return;let m=Math.floor((l+r)/2);await sort(l,m);await sort(m,r);await merge(l,m,r);}await sort(0,a.length);}async function patternQuick(a,d,l=0,r=a.length-1){if(!stopFlag)return;if(l>=r)return;let pivot=+a[r].alt,i=l;for(let j=l;j<r;j++){if(+a[j].alt<pivot){[a[i],a[j]]=[a[j],a[i]];swapOrder(a[i],a[j]);i++;await new Promise(r=>setTimeout(r,d));}}[a[i],a[r]]=[a[r],a[i]];swapOrder(a[i],a[r]);await patternQuick(a,d,l,i-1);await patternQuick(a,d,i+1,r);}function shuffleArray(array){for(let i=array.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[array[i],array[j]]=[array[j],array[i]];swapOrder(array[i],array[j]);}}